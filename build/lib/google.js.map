{
  "version": 3,
  "sources": ["../../src/lib/google.ts"],
  "sourcesContent": ["import { google, sheets_v4 } from \"googleapis\";\nimport { JWT } from \"google-auth-library\";\n\nexport class SpreadsheetUtils {\n\n    public constructor(private config: ioBroker.AdapterConfig, private log: ioBroker.Log) {\n    }\n\n    public deleteRows(sheetName:string, start:number, end:number): void {\n        const sheets = this.init();\n\n        sheets.spreadsheets.get({spreadsheetId: this.config.spreadsheetId}).then(spreadsheet => {\n            if (spreadsheet && spreadsheet.data.sheets) {\n                const sheet = spreadsheet.data.sheets\n                    .find(sheet => sheet.properties && sheet.properties.title ==sheetName);\n                if (sheet && sheet.properties) {\n                    const sheetId = sheet.properties.sheetId;\n                    sheets.spreadsheets.batchUpdate(\n                        {\n                            spreadsheetId: this.config.spreadsheetId,\n                            requestBody: {\n                                requests: [{\n                                    deleteDimension: {\n                                        range: {\n                                            dimension: \"ROWS\",\n                                            endIndex: end,\n                                            sheetId: sheetId,\n                                            startIndex: start-1\n                                        }\n                                    }\n                                }]\n                            }\n                        }\n\n                    ).then(() => {\n                        this.log.debug(\"Rows successfully deleted from google spreadsheet\");\n                    }).catch(error => {\n                        this.log.error(\"Error while deleting rows from Google Spreadsheet:\" + error);\n                    });\n                }\n            }\n        });\n\n\n    }\n\n    private init(): sheets_v4.Sheets{\n        const auth = new JWT({\n            email: this.config.serviceAccountEmail,\n            key: this.formatPrivateKey(this.config.privateKey),\n            scopes: [\"https://www.googleapis.com/auth/spreadsheets\"]\n        });\n        return google.sheets({ version: \"v4\", auth });\n    }\n\n    public createSheet(title: string): void{\n        const sheets = this.init();\n\n        sheets.spreadsheets.batchUpdate({\n            spreadsheetId: this.config.spreadsheetId,\n            requestBody: {\n                requests:[{addSheet:{\n                    properties:{\n                        title: title\n                    }\n                }}]\n            }\n        }).then(() => {\n            this.log.debug(\"Sheet created successfully\");\n        }).catch(error => {\n            this.log.error(\"Error while creating sheet:\"+ error);\n        });\n\n    }\n\n\n\n    public duplicateSheet(source: string, target: string, index: number): void {\n        const sheets = this.init();\n\n\n        sheets.spreadsheets.get({ spreadsheetId: this.config.spreadsheetId as string }).then(spreadsheet => {\n            if (spreadsheet && spreadsheet.data.sheets) {\n                const sheet = spreadsheet.data.sheets\n                    .find(sheet => sheet.properties && sheet.properties.title == source);\n                if (sheet && sheet.properties) {\n                    let insertIndex = index;\n                    if (insertIndex==-1 || insertIndex == undefined){\n                        insertIndex = spreadsheet.data.sheets.length;\n                    }\n                    sheets.spreadsheets.batchUpdate({\n                        spreadsheetId: this.config.spreadsheetId,\n                        requestBody: {\n                            requests: [{\n                                duplicateSheet: {\n                                    sourceSheetId: sheet.properties.sheetId,\n                                    newSheetName: target,\n                                    insertSheetIndex: insertIndex\n                                }\n                            }]\n                        }\n                    }).then(() => {\n                        this.log.debug(\"Data successfully sent to google spreadsheet\");\n                    }).catch(error => {\n                        this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n                    });\n                } else {\n                    this.log.warn(\"Cannot find sheet: \" + source);\n                }\n            }\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n        });\n\n\n    }\n    public upload(source:string, target:string, parentFolder:string, filecontent:any): void {\n\n\n        const auth = new JWT({\n            email: this.config.serviceAccountEmail,\n            key: this.config.privateKey,\n            scopes: [\"https://www.googleapis.com/auth/drive.file\"]\n        });\n        const driveapi = google.drive({ version: \"v3\", auth });\n\n\n        driveapi.files.create({\n            requestBody:{\n                parents: [parentFolder],\n                name: target\n            },\n            media:{\n                mimeType: \"application/octet-stream\",\n                body: filecontent\n            },\n            fields: \"id\"\n        }).then(() => {\n            this.log.debug(\"Data successfully uploaded to google spreadsheet\");\n        }).catch(error => {\n            this.log.error(\"Error while uploading data to Google Spreadsheet:\" + error);\n        });\n    }\n\n\n\n    public deleteSheet(title: string): void {\n        const sheets = this.init();\n\n        sheets.spreadsheets.get({ spreadsheetId: this.config.spreadsheetId as string }).then(spreadsheet => {\n            if (spreadsheet && spreadsheet.data.sheets) {\n                const sheet = spreadsheet.data.sheets\n                    .find(sheet => sheet.properties && sheet.properties.title == title);\n                if (sheet && sheet.properties) {\n                    sheets.spreadsheets.batchUpdate({\n                        spreadsheetId: this.config.spreadsheetId,\n                        requestBody: {\n                            requests: [{\n                                deleteSheet: {\n                                    sheetId: sheet.properties.sheetId\n                                }\n                            }]\n                        }\n                    }).then(() => {\n                        this.log.debug(\"Data successfully sent to google spreadsheet\");\n                    }).catch(error => {\n                        this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n                    });\n                }\n            }\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n        });\n\n\n    }\n\n\n\n    public append(sheetName:string, data:any): void{\n        const sheets = this.init();\n\n\n        sheets.spreadsheets.values.append({\n            // The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.\n            range: sheetName,\n            spreadsheetId: this.config.spreadsheetId,\n            valueInputOption: \"USER_ENTERED\",\n            // Request body metadata\n            requestBody: {\n                values: this.prepareValues(data)\n            },\n        }).then(() => {\n            this.log.debug(\"Data successfully sent to google spreadsheet\");\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\"+ error);\n        });\n\n    }\n\n    public write(sheetName:string, cell:string, data:any): void{\n        const sheets = this.init();\n\n\n        sheets.spreadsheets.values.update({\n            range: sheetName+\"!\"+cell,\n            spreadsheetId: this.config.spreadsheetId,\n            valueInputOption: \"USER_ENTERED\",\n            // Request body metadata\n            requestBody: {\n                values: this.prepareValues(data)\n            },\n        }).then(() => {\n            this.log.debug(\"Data successfully sent to google spreadsheet\");\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\"+ error);\n        });\n\n    }\n    public async read(sheetName:string, cell:string): Promise<any>{\n        const sheets = this.init();\n        return new Promise<any>((resolve, reject) => {\n\n            sheets.spreadsheets.values.get({\n                range: sheetName+\"!\"+cell,\n                spreadsheetId: this.config.spreadsheetId,\n            })\n            .then((response) => {\n                this.log.debug(\"Data successfully retrieved from google spreadsheet\");\n                if (response.data.values && response.data.values.length>0){\n                    resolve(response.data.values[0][0]);\n                } else {\n                    reject(\"No data found\");\n                }\n            }).catch(error => {\n                this.log.error(\"Error while retrieving data from Google Spreadsheet:\"+ error);\n                reject(error);\n            });\n        });\n\n    }\n    private prepareValues(message: any) : any{\n        if (Array.isArray(message)){\n            return [message];\n\n        } else {\n            return [[message]];\n        }\n\n    }\n    private formatPrivateKey(privateKey: string): string | undefined {\n        //replace all \\n with line breaks\n        if (privateKey) {\n            return privateKey.replace(/\\\\n/g, \"\\n\");\n        } else {\n            return undefined;\n        }\n    }\n\n}\n\n\n"],
  "mappings": "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",
  "names": ["sheet"]
}
