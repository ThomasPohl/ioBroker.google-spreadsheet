{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.4.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport {Auth} from \"googleapis\";\nconst request = require('request');\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass GoogleSpreadsheet extends utils.Adapter {\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"google-spreadsheet\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info(\"config spreadsheetId: \" + this.config.spreadsheetId);\n        this.log.info(\"config sheetName: \" + this.config.sheetName);\n\n     \n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === \"object\" && obj.message) {\n            if (obj.command === \"send\") {\n                this.log.info(\"send\");\n                this.fetchJwt(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            }\n        }\n    }\n\n    private fetchJwt(config: ioBroker.AdapterConfig, message: ioBroker.Message){\n        var jwtClient = new Auth.JWT(\n            this.config.serviceAccountEmail,\n            undefined,\n            this.config.privateKey.split('\\\\n').join('\\n'),\n            ['https://www.googleapis.com/auth/spreadsheets']\n          );\n          \n          this.log.info(\"Fetching jwt\");\n          const log = this.log;\n          // Authentifiziere den Service Account und erhalte ein Zugriffstoken\n          jwtClient.authorize(function(err, tokens) {\n            if (err) {\n              log.error(err.message);\n              return;\n            }\n            if (!tokens){\n                return;\n            }\n            log.info(\"Successfully fetched jwt\");\n            var accessToken = tokens.access_token;\n\n            // Sende die Daten an das Google Spreadsheet\n            var url = \"https://sheets.googleapis.com/v4/spreadsheets/\" + config.spreadsheetId + \"/values/\" + encodeURIComponent(config.sheetName) + \":append?valueInputOption=RAW\";\n          \n            var options = {\n              url: url,\n              method: \"POST\",\n              headers: {\n                Authorization: \"Bearer \" + accessToken\n              },\n              json: {\n                values: prepareValues(message, log)\n              }\n            };\n            log.info(\"Appending to spreadsheet: \" + JSON.stringify(options));\n            request(options, function(error: any, response: any, body: any) {\n              if (error) {\n                log.error(\"Fehler beim Senden der Daten an Google Spreadsheet:\"+ error);\n              } else if (response.statusCode !== 200) {\n                log.error(\"Fehler beim Senden der Daten an Google Spreadsheet. Statuscode:\"+ response.statusCode);\n              } else {\n                log.info(\"Daten erfolgreich an Google Spreadsheet gesendet\");\n              }\n            });\n        });\n    }\n\n\n}\n\nfunction prepareValues(message: ioBroker.Message, log: ioBroker.Log) : any{\n    log.info(\"Type: \" + message.message.constructor.toString());\n    if (Array.isArray(message.message)){\n        log.info(\"is Array\");\n        return [message.message];\n\n    } else {\n        log.info(\"Message: \"+ JSON.stringify(message));\n        return [[message.message]];\n    }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new GoogleSpreadsheet(options);\n} else {\n    // otherwise start the instance directly\n    (() => new GoogleSpreadsheet())();\n}"],
  "mappings": "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",
  "names": []
}
