{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.4.0\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport { google, sheets_v4 } from \"googleapis\";\nimport { JWT } from \"google-auth-library\";\nimport fs from \"fs\";\n\n\nclass GoogleSpreadsheet extends utils.Adapter {\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"google-spreadsheet\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info(\"config spreadsheetId: \" + this.config.spreadsheetId);\n\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === \"object\" && obj.message) {\n            if (obj.command === \"append\") {\n                this.log.info(\"append to spreadsheet\");\n                this.append(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            } else if (obj.command === \"deleteRows\") {\n                this.log.info(\"delete rows from spreadsheet\");\n                this.deleteRows(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            } else if (obj.command === \"createSheet\") {\n                this.log.info(\"create sheet\");\n                this.createSheet(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            } else if (obj.command === \"deleteSheet\") {\n                this.log.info(\"delete sheet\");\n                this.deleteSheet(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            } else if (obj.command === \"duplicateSheet\") {\n                this.log.info(\"duplicate sheet\");\n                this.duplicateSheet(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            } else if (obj.command === \"upload\") {\n                this.log.info(\"upload file\");\n                this.upload(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            } else {\n                this.log.warn(\"unknown command: \"+ obj.command);\n            }\n        }\n    }\n\n    private append(config: ioBroker.AdapterConfig, message: ioBroker.Message): void{\n        const sheets = this.init();\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"sheetName\", \"data\"], messageData)){\n            return;\n        }\n\n        sheets.spreadsheets.values.append({\n            // The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.\n            range: messageData[\"sheetName\"],\n            spreadsheetId: this.config.spreadsheetId,\n            valueInputOption: \"USER_ENTERED\",\n            // Request body metadata\n            requestBody: {\n                values: this.prepareValues(messageData[\"data\"])\n            },\n        }).then(() => {\n            this.log.info(\"Data successfully sent to google spreadsheet\");\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\"+ error);\n        });\n\n    }\n\n    private prepareValues(message: any) : any{\n        if (Array.isArray(message)){\n            return [message];\n\n        } else {\n            return [[message]];\n        }\n\n    }\n\n    private missingParameters( neededParameters: string[], messageData: Record<string, any>): boolean {\n\n        let result = false;\n        for (const parameter of neededParameters){\n            if (Object.keys(messageData).indexOf(parameter)==-1){\n                result=true;\n                this.log.error(\"The parameter '\" + parameter + \"' is required but was not passed!\");\n            }\n        }\n\n        return result;\n    }\n\n    private deleteRows(config: ioBroker.AdapterConfig, message: ioBroker.Message): void {\n        this.log.debug(\"Message: \" + JSON.stringify(message));\n        const sheets = this.init();\n\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"sheetName\", \"start\", \"end\"], messageData)){\n            return;\n        }\n\n        sheets.spreadsheets.get({spreadsheetId: this.config.spreadsheetId}).then(spreadsheet => {\n            if (spreadsheet && spreadsheet.data.sheets) {\n                const sheet = spreadsheet.data.sheets\n                    .find(sheet => sheet.properties && sheet.properties.title == messageData[\"sheetName\"]);\n                if (sheet && sheet.properties) {\n                    const sheetId = sheet.properties.sheetId;\n                    sheets.spreadsheets.batchUpdate(\n                        {\n                            spreadsheetId: this.config.spreadsheetId,\n                            requestBody: {\n                                requests: [{\n                                    deleteDimension: {\n                                        range: {\n                                            dimension: \"ROWS\",\n                                            endIndex: messageData[\"end\"],\n                                            sheetId: sheetId,\n                                            startIndex: messageData[\"start\"]-1\n                                        }\n\n                                    }\n                                }]\n                            }\n                        }\n\n                    ).then(() => {\n                        this.log.info(\"Rows successfully deleted from google spreadsheet\");\n                    }).catch(error => {\n                        this.log.error(\"Error while deleting rows from Google Spreadsheet:\" + error);\n                    });\n                }\n            }\n        });\n\n\n    }\n\n    private init(): sheets_v4.Sheets{\n        const auth = new JWT({\n            email: this.config.serviceAccountEmail,\n            key: this.config.privateKey,\n            scopes: [\"https://www.googleapis.com/auth/spreadsheets\"]\n        });\n        return google.sheets({ version: \"v4\", auth });\n    }\n\n    private createSheet(config: ioBroker.AdapterConfig, message: ioBroker.Message): void{\n        const sheets = this.init();\n\n        sheets.spreadsheets.batchUpdate({\n            spreadsheetId: this.config.spreadsheetId,\n            requestBody: {\n                requests:[{addSheet:{\n                    properties:{\n                        title: message.message as string\n                    }\n                }}]\n            }\n        }).then(() => {\n            this.log.info(\"Sheet created successfully\");\n        }).catch(error => {\n            this.log.error(\"Error while creating sheet:\"+ error);\n        });\n\n    }\n\n    private deleteSheet(config: ioBroker.AdapterConfig, message: ioBroker.Message): void {\n        const sheets = this.init();\n\n        sheets.spreadsheets.get({ spreadsheetId: this.config.spreadsheetId as string }).then(spreadsheet => {\n            if (spreadsheet && spreadsheet.data.sheets) {\n                const sheet = spreadsheet.data.sheets\n                    .find(sheet => sheet.properties && sheet.properties.title == message.message);\n                if (sheet && sheet.properties) {\n                    sheets.spreadsheets.batchUpdate({\n                        spreadsheetId: this.config.spreadsheetId,\n                        requestBody: {\n                            requests: [{\n                                deleteSheet: {\n                                    sheetId: sheet.properties.sheetId\n                                }\n                            }]\n                        }\n                    }).then(() => {\n                        this.log.info(\"Data successfully sent to google spreadsheet\");\n                    }).catch(error => {\n                        this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n                    });\n                }\n            }\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n        });\n\n\n    }\n\n    private duplicateSheet(config: ioBroker.AdapterConfig, message: ioBroker.Message): void {\n        const sheets = this.init();\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"source\", \"target\", \"index\"], messageData)){\n            return;\n        }\n\n        sheets.spreadsheets.get({ spreadsheetId: this.config.spreadsheetId as string }).then(spreadsheet => {\n            if (spreadsheet && spreadsheet.data.sheets) {\n                const sheet = spreadsheet.data.sheets\n                    .find(sheet => sheet.properties && sheet.properties.title == messageData[\"source\"]);\n                if (sheet && sheet.properties) {\n                    let insertIndex = messageData[\"index\"];\n                    if (insertIndex==-1 || insertIndex == undefined){\n                        insertIndex = spreadsheet.data.sheets.length;\n                    }\n                    sheets.spreadsheets.batchUpdate({\n                        spreadsheetId: this.config.spreadsheetId,\n                        requestBody: {\n                            requests: [{\n                                duplicateSheet: {\n                                    sourceSheetId: sheet.properties.sheetId,\n                                    newSheetName: messageData[\"target\"],\n                                    insertSheetIndex: insertIndex\n                                }\n                            }]\n                        }\n                    }).then(() => {\n                        this.log.info(\"Data successfully sent to google spreadsheet\");\n                    }).catch(error => {\n                        this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n                    });\n                } else {\n                    this.log.warn(\"Cannot find sheet: \" + messageData[\"source\"]);\n                }\n            }\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\" + error);\n        });\n\n\n    }\n    private upload(config: ioBroker.AdapterConfig, message: ioBroker.Message): void {\n\n\n        const auth = new JWT({\n            email: this.config.serviceAccountEmail,\n            key: this.config.privateKey,\n            scopes: [\"https://www.googleapis.com/auth/drive.file\"]\n        });\n        const driveapi = google.drive({ version: \"v3\", auth });\n\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"source\", \"target\", \"parentFolder\"], messageData)){\n            return;\n        }\n        driveapi.files.create({\n            requestBody:{\n                parents: [messageData[\"parentFolder\"]],\n                name: messageData[\"target\"]\n            },\n            media:{\n                mimeType: \"application/octet-stream\",\n                body: fs.createReadStream(messageData[\"source\"])\n            },\n            fields: \"id\"\n        }).then(() => {\n            this.log.info(\"Data successfully uploaded to google spreadsheet\");\n        }).catch(error => {\n            this.log.error(\"Error while uploading data to Google Spreadsheet:\" + error);\n        });\n    }\n}\n\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new GoogleSpreadsheet(options);\n} else {\n    // otherwise start the instance directly\n    (() => new GoogleSpreadsheet())();\n}\n"],
  "mappings": "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",
  "names": ["sheet", "fs"]
}
