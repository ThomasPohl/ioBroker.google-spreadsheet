{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.4.0\n */\n\n\n\n\nimport * as utils from \"@iobroker/adapter-core\";\n\nimport fs from \"fs\";\nimport { SpreadsheetUtils } from \"./lib/google\";\n\n\nclass GoogleSpreadsheet extends utils.Adapter {\n\n    private spreadsheet: SpreadsheetUtils;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"google-spreadsheet\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n        this.spreadsheet = new SpreadsheetUtils(this.config, this.log);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.debug(\"config spreadsheetId: \" + this.config.spreadsheetId);\n        this.spreadsheet = new SpreadsheetUtils(this.config, this.log);\n\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === \"object\" && obj.message) {\n            this.log.warn(\"switching command: \" + obj.command);\n            switch (obj.command) {\n                case \"append\": {\n                    this.log.debug(\"append to spreadsheet\");\n                    this.append(obj);\n\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                    break; \n                }\n                case \"deleteRows\": {\n                    this.log.debug(\"delete rows from spreadsheet\");\n                    this.deleteRows(obj);\n\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                    break; \n                }\n                case \"createSheet\": {\n                    this.log.debug(\"create sheet\");\n                    this.createSheet(obj);\n\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                    break; \n                }\n                case \"deleteSheet\": {\n                    this.log.debug(\"delete sheet\");\n                    this.deleteSheet(obj);\n\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                    break; \n                }\n                case \"duplicateSheet\": {\n                    this.log.debug(\"duplicate sheet\");\n                    this.duplicateSheet(obj);\n\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                    break; \n                }\n                case \"upload\": {\n                    this.log.debug(\"upload file\");\n                    this.upload(obj);\n\n                    if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n                    break; \n                }\n                default: {\n                    this.log.warn(\"unknown command: \" + obj.command);\n                    break; \n                }\n            }\n        }\n    }\n\n    private upload(message: Record<string, any>): void {\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"source\", \"target\", \"parentFolder\"], messageData)) {\n            return;\n        }\n        this.spreadsheet.upload(messageData[\"source\"], messageData[\"target\"], messageData[\"parentFolder\"], fs.createReadStream(messageData[\"source\"]));\n    }\n    private append(message: Record<string, any>): void {\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"sheetName\", \"data\"], messageData)) {\n            return;\n        }\n        this.spreadsheet.append(messageData[\"sheetName\"], messageData[\"data\"]);\n    }\n    public deleteRows(message: ioBroker.Message): void {\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"sheetName\", \"start\", \"end\"], messageData)) {\n            return;\n        }\n        this.spreadsheet.deleteRows(messageData[\"sheetName\"], messageData[\"start\"], messageData[\"end\"]);\n    }\n    public createSheet(message: ioBroker.Message): void {\n        this.spreadsheet.createSheet(message.message as string);\n    }\n    public deleteSheet(message: ioBroker.Message): void {\n        this.spreadsheet.deleteSheet(message.message as string);\n    }\n    public duplicateSheet(message: ioBroker.Message): void {\n        const messageData: Record<string, any> = message.message as Record<string, any>;\n        if (this.missingParameters([\"source\", \"target\", \"index\"], messageData)) {\n            return;\n        }\n        this.spreadsheet.duplicateSheet(messageData[\"source\"], messageData[\"target\"], messageData[\"index\"]);\n    }\n\n    private missingParameters(neededParameters: string[], messageData: Record<string, any>): boolean {\n\n        let result = false;\n        for (const parameter of neededParameters) {\n            if (Object.keys(messageData).indexOf(parameter) == -1) {\n                result = true;\n                this.log.error(\"The parameter '\" + parameter + \"' is required but was not passed!\");\n            }\n        }\n\n        return result;\n    }\n\n}\n\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new GoogleSpreadsheet(options);\n} else {\n    // otherwise start the instance directly\n    (() => new GoogleSpreadsheet())();\n}\n"],
  "mappings": "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",
  "names": ["fs"]
}
