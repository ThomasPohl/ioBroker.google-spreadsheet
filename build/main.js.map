{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.4.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { google } from \"googleapis\";\nimport { JWT } from \"google-auth-library\";\n\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass GoogleSpreadsheet extends utils.Adapter {\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"google-spreadsheet\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info(\"config spreadsheetId: \" + this.config.spreadsheetId);\n        this.log.info(\"config sheetName: \" + this.config.sheetName);\n\n\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === \"object\" && obj.message) {\n            if (obj.command === \"send\") {\n                this.log.info(\"send\");\n                this.fetchJwt(this.config, obj);\n\n                // Send response in callback if required\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n            }\n        }\n    }\n\n    private fetchJwt(config: ioBroker.AdapterConfig, message: ioBroker.Message): void{\n        const auth = new JWT({\n            email: this.config.serviceAccountEmail,\n            key: this.config.privateKey,\n            scopes: [\"https://www.googleapis.com/auth/spreadsheets\"]\n        });\n        const sheets = google.sheets({ version: \"v4\", auth });\n\n        sheets.spreadsheets.values.append({\n            // The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.\n            range: this.config.sheetName,\n            spreadsheetId: this.config.spreadsheetId,\n            valueInputOption: \"USER_ENTERED\",\n            // Request body metadata\n            requestBody: {\n                values: prepareValues(message, this.log)\n            },\n        }).then(() => {\n            this.log.info(\"Data successfully sent to google spreadsheet\");\n        }).catch(error => {\n            this.log.error(\"Error while sending data to Google Spreadsheet:\"+ error);\n        });\n\n    }\n\n\n}\n\nfunction prepareValues(message: ioBroker.Message, log: ioBroker.Log) : any{\n    log.info(\"Type: \" + message.message.constructor.toString());\n    if (Array.isArray(message.message)){\n        log.info(\"is Array\");\n        return [message.message];\n\n    } else {\n        log.info(\"Message: \"+ JSON.stringify(message));\n        return [[message.message]];\n    }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new GoogleSpreadsheet(options);\n} else {\n    // otherwise start the instance directly\n    (() => new GoogleSpreadsheet())();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,wBAAuB;AACvB,iCAAoB;AAMpB,MAAM,0BAA0B,MAAM,QAAQ;AAAA,EAEnC,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAKnC,SAAK,IAAI,KAAK,2BAA2B,KAAK,OAAO,aAAa;AAClE,SAAK,IAAI,KAAK,uBAAuB,KAAK,OAAO,SAAS;AAAA,EAG9D;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAOQ,UAAU,KAA6B;AAC3C,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,UAAI,IAAI,YAAY,QAAQ;AACxB,aAAK,IAAI,KAAK,MAAM;AACpB,aAAK,SAAS,KAAK,QAAQ,GAAG;AAG9B,YAAI,IAAI;AAAU,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,oBAAoB,IAAI,QAAQ;AAAA,MACzF;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,SAAS,QAAgC,SAAgC;AAC7E,UAAM,OAAO,IAAI,+BAAI;AAAA,MACjB,OAAO,KAAK,OAAO;AAAA,MACnB,KAAK,KAAK,OAAO;AAAA,MACjB,QAAQ,CAAC,8CAA8C;AAAA,IAC3D,CAAC;AACD,UAAM,SAAS,yBAAO,OAAO,EAAE,SAAS,MAAM,KAAK,CAAC;AAEpD,WAAO,aAAa,OAAO,OAAO;AAAA,MAE9B,OAAO,KAAK,OAAO;AAAA,MACnB,eAAe,KAAK,OAAO;AAAA,MAC3B,kBAAkB;AAAA,MAElB,aAAa;AAAA,QACT,QAAQ,cAAc,SAAS,KAAK,GAAG;AAAA,MAC3C;AAAA,IACJ,CAAC,EAAE,KAAK,MAAM;AACV,WAAK,IAAI,KAAK,8CAA8C;AAAA,IAChE,CAAC,EAAE,MAAM,WAAS;AACd,WAAK,IAAI,MAAM,oDAAmD,KAAK;AAAA,IAC3E,CAAC;AAAA,EAEL;AAGJ;AAEA,SAAS,cAAc,SAA2B,KAAwB;AACtE,MAAI,KAAK,WAAW,QAAQ,QAAQ,YAAY,SAAS,CAAC;AAC1D,MAAI,MAAM,QAAQ,QAAQ,OAAO,GAAE;AAC/B,QAAI,KAAK,UAAU;AACnB,WAAO,CAAC,QAAQ,OAAO;AAAA,EAE3B,OAAO;AACH,QAAI,KAAK,cAAa,KAAK,UAAU,OAAO,CAAC;AAC7C,WAAO,CAAC,CAAC,QAAQ,OAAO,CAAC;AAAA,EAC7B;AAEJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,kBAAkB,OAAO;AAC1G,OAAO;AAEH,GAAC,MAAM,IAAI,kBAAkB,GAAG;AACpC;",
  "names": []
}
